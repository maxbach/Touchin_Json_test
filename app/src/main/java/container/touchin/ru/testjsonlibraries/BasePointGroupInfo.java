/*
 * This code is autogenerated by Touch Instinct tools
 */
package container.touchin.ru.testjsonlibraries;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.util.ObjectsCompat;
import com.bluelinelabs.logansquare.annotation.JsonField;
import com.bluelinelabs.logansquare.annotation.JsonObject;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

/**
 * Данные о группе точек
 */
@JsonObject
public class BasePointGroupInfo {

    /**
     * Адрес
     */
    @NonNull
    @JsonField(name = "address")
    private String address;

    /**
     * Широта
     */

    @JsonField(name = "latitude")
    private double latitude;

    /**
     * Долгота
     */

    @JsonField(name = "longitude")
    private double longitude;

    public BasePointGroupInfo() {
        super();
    }

    //TODO: if TItems instance of arrayList then new ArrayList
    public BasePointGroupInfo(
            @NonNull final String address,
            final double latitude,
            final double longitude
    ) {
        super();
        this.address = address;
        this.latitude = latitude;
        this.longitude = longitude;
    }


    /**
     * Адрес
     */
    @NonNull
    public String getAddress() {
        return this.address;
    }

    /**
     * Адрес
     */
    public void setAddress(@NonNull final String address) {
        this.address = address;
    }

    /**
     * Широта
     */

    public double getLatitude() {
        return this.latitude;
    }

    /**
     * Широта
     */
    public void setLatitude(final double latitude) {
        this.latitude = latitude;
    }

    /**
     * Долгота
     */

    public double getLongitude() {
        return this.longitude;
    }

    /**
     * Долгота
     */
    public void setLongitude(final double longitude) {
        this.longitude = longitude;
    }

    protected void copyTo(@NonNull final BasePointGroupInfo destination) {
        destination.address = address;
        destination.latitude = latitude;
        destination.longitude = longitude;
    }

    @NonNull
    public BasePointGroupInfo copy() {
        final BasePointGroupInfo result = new BasePointGroupInfo();
        this.copyTo(result);
        return result;
    }

    public int hashCode() {
        return ObjectsCompat.hash(address, latitude, longitude);
    }

    public boolean equals(@Nullable final Object object) {
        if (this == object) {
            return true;
        }
        if (object == null || getClass() != object.getClass()) {
            return false;
        }
        final BasePointGroupInfo that = (BasePointGroupInfo) object;
        return ObjectsCompat.equals(this.address, that.address)
                && ObjectsCompat.equals(this.latitude, that.latitude)
                && ObjectsCompat.equals(this.longitude, that.longitude);
    }

    private void writeObject(@NonNull final ObjectOutputStream outputStream) throws IOException {
        outputStream.writeUTF(this.address);
        outputStream.writeDouble(this.latitude);
        outputStream.writeDouble(this.longitude);
    }

    @SuppressWarnings("unchecked")
    private void readObject(@NonNull final ObjectInputStream inputStream) throws IOException, ClassNotFoundException {
        this.address = inputStream.readUTF();
        this.latitude = inputStream.readDouble();
        this.longitude = inputStream.readDouble();
    }

}
