/*
 * This code is autogenerated by Touch Instinct tools
 */
package container.touchin.ru.testjsonlibraries;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.util.ObjectsCompat;
import com.bluelinelabs.logansquare.annotation.JsonField;
import com.bluelinelabs.logansquare.annotation.JsonObject;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

/**
 * Формат ответа сервера
 */
@JsonObject(serializeNullObjects = false)
public class BaseResponse<T> {

    /**
     * Результат
     */
    @Nullable
    @JsonField(name = "result")
    private T result;

    /**
     * Код ошибки, 0 если нет ошибки
     */
    @NonNull
    @JsonField(name = "errorCode")
    private ApiError errorCode;

    /**
     * Описание ошибки
     */
    @Nullable
    @JsonField(name = "errorMessage")
    private String errorMessage;

    public BaseResponse() {
        super();
    }

    //TODO: if TItems instance of arrayList then new ArrayList
    public BaseResponse(
            @Nullable final T result,
            @NonNull final ApiError errorCode,
            @Nullable final String errorMessage
    ) {
        super();
        this.result = result;
        this.errorCode = errorCode;
        this.errorMessage = errorMessage;
    }


    /**
     * Результат
     */
    @Nullable
    public T getResult() {
        if (this.result == null) {
            return null;
        }
        return this.result;
    }

    /**
     * Результат
     */
    public void setResult(@Nullable final T result) {
        this.result = result;
    }

    /**
     * Код ошибки, 0 если нет ошибки
     */
    @NonNull
    public ApiError getErrorCode() {
        return this.errorCode;
    }

    /**
     * Код ошибки, 0 если нет ошибки
     */
    public void setErrorCode(@NonNull final ApiError errorCode) {
        this.errorCode = errorCode;
    }

    /**
     * Описание ошибки
     */
    @Nullable
    public String getErrorMessage() {
        if (this.errorMessage == null) {
            return null;
        }
        return this.errorMessage;
    }

    /**
     * Описание ошибки
     */
    public void setErrorMessage(@Nullable final String errorMessage) {
        this.errorMessage = errorMessage;
    }

    protected void copyTo(@NonNull final BaseResponse<T> destination) {
        destination.result = result;
        destination.errorCode = errorCode;
        destination.errorMessage = errorMessage;
    }

    @NonNull
    public BaseResponse<T> copy() {
        final BaseResponse<T> result = new BaseResponse<T>();
        this.copyTo(result);
        return result;
    }

    public int hashCode() {
        return ObjectsCompat.hash(result, errorCode, errorMessage);
    }

    public boolean equals(@Nullable final Object object) {
        if (this == object) {
            return true;
        }
        if (object == null || getClass() != object.getClass()) {
            return false;
        }
        final BaseResponse<T> that = (BaseResponse<T>) object;
        return ObjectsCompat.equals(this.result, that.result)
                && ObjectsCompat.equals(this.errorCode, that.errorCode)
                && ObjectsCompat.equals(this.errorMessage, that.errorMessage);
    }

    private void writeObject(@NonNull final ObjectOutputStream outputStream) throws IOException {
        outputStream.writeObject(this.result);
        outputStream.writeObject(this.errorCode);
        outputStream.writeObject(this.errorMessage);
    }

    @SuppressWarnings("unchecked")
    private void readObject(@NonNull final ObjectInputStream inputStream) throws IOException, ClassNotFoundException {
        this.result = (T) inputStream.readObject();
        this.errorCode = (ApiError) inputStream.readObject();
        this.errorMessage = (String) inputStream.readObject();
    }

}
